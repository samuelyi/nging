// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_NgingForeverProcess []*NgingForeverProcess

func (s Slice_NgingForeverProcess) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_NgingForeverProcess) RangeRaw(fn func(m *NgingForeverProcess) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_NgingForeverProcess) GroupBy(keyField string) map[string][]*NgingForeverProcess {
	r := map[string][]*NgingForeverProcess{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*NgingForeverProcess{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_NgingForeverProcess) KeyBy(keyField string) map[string]*NgingForeverProcess {
	r := map[string]*NgingForeverProcess{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_NgingForeverProcess) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_NgingForeverProcess) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

func (s Slice_NgingForeverProcess) FromList(data interface{}) Slice_NgingForeverProcess {
	values, ok := data.([]*NgingForeverProcess)
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &NgingForeverProcess{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)

	return s
}

func NewNgingForeverProcess(ctx echo.Context) *NgingForeverProcess {
	m := &NgingForeverProcess{}
	m.SetContext(ctx)
	return m
}

// NgingForeverProcess 持久进程
type NgingForeverProcess struct {
	base    factory.Base
	objects []*NgingForeverProcess

	Id           uint   `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	Uid          uint   `db:"uid" bson:"uid" comment:"添加人ID" json:"uid" xml:"uid"`
	Name         string `db:"name" bson:"name" comment:"名称" json:"name" xml:"name"`
	Command      string `db:"command" bson:"command" comment:"命令" json:"command" xml:"command"`
	Workdir      string `db:"workdir" bson:"workdir" comment:"工作目录" json:"workdir" xml:"workdir"`
	Env          string `db:"env" bson:"env" comment:"环境变量" json:"env" xml:"env"`
	Args         string `db:"args" bson:"args" comment:"命令参数" json:"args" xml:"args"`
	Pidfile      string `db:"pidfile" bson:"pidfile" comment:"PID记录文件" json:"pidfile" xml:"pidfile"`
	Logfile      string `db:"logfile" bson:"logfile" comment:"日志记录文件" json:"logfile" xml:"logfile"`
	Errfile      string `db:"errfile" bson:"errfile" comment:"错误记录文件" json:"errfile" xml:"errfile"`
	Respawn      uint   `db:"respawn" bson:"respawn" comment:"重试次数(进程被外部程序结束后自动启动)" json:"respawn" xml:"respawn"`
	Delay        string `db:"delay" bson:"delay" comment:"延迟启动(例如1ms/1s/1m/1h)" json:"delay" xml:"delay"`
	Ping         string `db:"ping" bson:"ping" comment:"心跳时间(例如1ms/1s/1m/1h)" json:"ping" xml:"ping"`
	Pid          int    `db:"pid" bson:"pid" comment:"PID" json:"pid" xml:"pid"`
	Status       string `db:"status" bson:"status" comment:"进程运行状态" json:"status" xml:"status"`
	Debug        string `db:"debug" bson:"debug" comment:"DEBUG" json:"debug" xml:"debug"`
	Disabled     string `db:"disabled" bson:"disabled" comment:"是否禁用" json:"disabled" xml:"disabled"`
	Created      uint   `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated      uint   `db:"updated" bson:"updated" comment:"修改时间" json:"updated" xml:"updated"`
	Error        string `db:"error" bson:"error" comment:"错误信息" json:"error" xml:"error"`
	Lastrun      uint   `db:"lastrun" bson:"lastrun" comment:"上次运行时间" json:"lastrun" xml:"lastrun"`
	Description  string `db:"description" bson:"description" comment:"说明" json:"description" xml:"description"`
	EnableNotify uint   `db:"enable_notify" bson:"enable_notify" comment:"是否启用通知" json:"enable_notify" xml:"enable_notify"`
	NotifyEmail  string `db:"notify_email" bson:"notify_email" comment:"通知人列表" json:"notify_email" xml:"notify_email"`
}

// - base function

func (a *NgingForeverProcess) Trans() *factory.Transaction {
	return a.base.Trans()
}

func (a *NgingForeverProcess) Use(trans *factory.Transaction) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *NgingForeverProcess) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *NgingForeverProcess) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *NgingForeverProcess) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *NgingForeverProcess) Context() echo.Context {
	return a.base.Context()
}

func (a *NgingForeverProcess) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *NgingForeverProcess) SetNamer(namer func(factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *NgingForeverProcess) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *NgingForeverProcess) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *NgingForeverProcess) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

// - current function

func (a *NgingForeverProcess) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName, connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName, a.base.ConnID()).Use(a.base.Trans())
}

func (a *NgingForeverProcess) Objects() []*NgingForeverProcess {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *NgingForeverProcess) XObjects() Slice_NgingForeverProcess {
	return Slice_NgingForeverProcess(a.Objects())
}

func (a *NgingForeverProcess) NewObjects() factory.Ranger {
	return &Slice_NgingForeverProcess{}
}

func (a *NgingForeverProcess) InitObjects() *[]*NgingForeverProcess {
	a.objects = []*NgingForeverProcess{}
	return &a.objects
}

func (a *NgingForeverProcess) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *NgingForeverProcess) Short_() string {
	return "nging_forever_process"
}

func (a *NgingForeverProcess) Struct_() string {
	return "NgingForeverProcess"
}

func (a *NgingForeverProcess) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *NgingForeverProcess) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.Use(source.Trans())
	a.SetNamer(source.Namer())
	return a
}

func (a *NgingForeverProcess) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *NgingForeverProcess) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*NgingForeverProcess:
			err = DBI.FireReaded(a, queryParam, Slice_NgingForeverProcess(*v))
		case []*NgingForeverProcess:
			err = DBI.FireReaded(a, queryParam, Slice_NgingForeverProcess(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *NgingForeverProcess) GroupBy(keyField string, inputRows ...[]*NgingForeverProcess) map[string][]*NgingForeverProcess {
	var rows Slice_NgingForeverProcess
	if len(inputRows) > 0 {
		rows = Slice_NgingForeverProcess(inputRows[0])
	} else {
		rows = Slice_NgingForeverProcess(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *NgingForeverProcess) KeyBy(keyField string, inputRows ...[]*NgingForeverProcess) map[string]*NgingForeverProcess {
	var rows Slice_NgingForeverProcess
	if len(inputRows) > 0 {
		rows = Slice_NgingForeverProcess(inputRows[0])
	} else {
		rows = Slice_NgingForeverProcess(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *NgingForeverProcess) AsKV(keyField string, valueField string, inputRows ...[]*NgingForeverProcess) param.Store {
	var rows Slice_NgingForeverProcess
	if len(inputRows) > 0 {
		rows = Slice_NgingForeverProcess(inputRows[0])
	} else {
		rows = Slice_NgingForeverProcess(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *NgingForeverProcess) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*NgingForeverProcess:
			err = DBI.FireReaded(a, queryParam, Slice_NgingForeverProcess(*v))
		case []*NgingForeverProcess:
			err = DBI.FireReaded(a, queryParam, Slice_NgingForeverProcess(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *NgingForeverProcess) Insert() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.Status) == 0 {
		a.Status = "idle"
	}
	if len(a.Debug) == 0 {
		a.Debug = "N"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *NgingForeverProcess) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Status) == 0 {
		a.Status = "idle"
	}
	if len(a.Debug) == 0 {
		a.Debug = "N"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *NgingForeverProcess) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Status) == 0 {
		a.Status = "idle"
	}
	if len(a.Debug) == 0 {
		a.Debug = "N"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *NgingForeverProcess) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Status) == 0 {
		a.Status = "idle"
	}
	if len(a.Debug) == 0 {
		a.Debug = "N"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *NgingForeverProcess) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Status) == 0 {
		a.Status = "idle"
	}
	if len(a.Debug) == 0 {
		a.Debug = "N"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *NgingForeverProcess) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *NgingForeverProcess) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["status"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["status"] = "idle"
		}
	}
	if val, ok := kvset["debug"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["debug"] = "N"
		}
	}
	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *NgingForeverProcess) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *NgingForeverProcess) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.Status) == 0 {
			a.Status = "idle"
		}
		if len(a.Debug) == 0 {
			a.Debug = "N"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.Status) == 0 {
			a.Status = "idle"
		}
		if len(a.Debug) == 0 {
			a.Debug = "N"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *NgingForeverProcess) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *NgingForeverProcess) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *NgingForeverProcess) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *NgingForeverProcess) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *NgingForeverProcess) Reset() *NgingForeverProcess {
	a.Id = 0
	a.Uid = 0
	a.Name = ``
	a.Command = ``
	a.Workdir = ``
	a.Env = ``
	a.Args = ``
	a.Pidfile = ``
	a.Logfile = ``
	a.Errfile = ``
	a.Respawn = 0
	a.Delay = ``
	a.Ping = ``
	a.Pid = 0
	a.Status = ``
	a.Debug = ``
	a.Disabled = ``
	a.Created = 0
	a.Updated = 0
	a.Error = ``
	a.Lastrun = 0
	a.Description = ``
	a.EnableNotify = 0
	a.NotifyEmail = ``
	return a
}

func (a *NgingForeverProcess) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["Id"] = a.Id
		r["Uid"] = a.Uid
		r["Name"] = a.Name
		r["Command"] = a.Command
		r["Workdir"] = a.Workdir
		r["Env"] = a.Env
		r["Args"] = a.Args
		r["Pidfile"] = a.Pidfile
		r["Logfile"] = a.Logfile
		r["Errfile"] = a.Errfile
		r["Respawn"] = a.Respawn
		r["Delay"] = a.Delay
		r["Ping"] = a.Ping
		r["Pid"] = a.Pid
		r["Status"] = a.Status
		r["Debug"] = a.Debug
		r["Disabled"] = a.Disabled
		r["Created"] = a.Created
		r["Updated"] = a.Updated
		r["Error"] = a.Error
		r["Lastrun"] = a.Lastrun
		r["Description"] = a.Description
		r["EnableNotify"] = a.EnableNotify
		r["NotifyEmail"] = a.NotifyEmail
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "Id":
			r["Id"] = a.Id
		case "Uid":
			r["Uid"] = a.Uid
		case "Name":
			r["Name"] = a.Name
		case "Command":
			r["Command"] = a.Command
		case "Workdir":
			r["Workdir"] = a.Workdir
		case "Env":
			r["Env"] = a.Env
		case "Args":
			r["Args"] = a.Args
		case "Pidfile":
			r["Pidfile"] = a.Pidfile
		case "Logfile":
			r["Logfile"] = a.Logfile
		case "Errfile":
			r["Errfile"] = a.Errfile
		case "Respawn":
			r["Respawn"] = a.Respawn
		case "Delay":
			r["Delay"] = a.Delay
		case "Ping":
			r["Ping"] = a.Ping
		case "Pid":
			r["Pid"] = a.Pid
		case "Status":
			r["Status"] = a.Status
		case "Debug":
			r["Debug"] = a.Debug
		case "Disabled":
			r["Disabled"] = a.Disabled
		case "Created":
			r["Created"] = a.Created
		case "Updated":
			r["Updated"] = a.Updated
		case "Error":
			r["Error"] = a.Error
		case "Lastrun":
			r["Lastrun"] = a.Lastrun
		case "Description":
			r["Description"] = a.Description
		case "EnableNotify":
			r["EnableNotify"] = a.EnableNotify
		case "NotifyEmail":
			r["NotifyEmail"] = a.NotifyEmail
		}
	}
	return r
}

func (a *NgingForeverProcess) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint(value)
		case "uid":
			a.Uid = param.AsUint(value)
		case "name":
			a.Name = param.AsString(value)
		case "command":
			a.Command = param.AsString(value)
		case "workdir":
			a.Workdir = param.AsString(value)
		case "env":
			a.Env = param.AsString(value)
		case "args":
			a.Args = param.AsString(value)
		case "pidfile":
			a.Pidfile = param.AsString(value)
		case "logfile":
			a.Logfile = param.AsString(value)
		case "errfile":
			a.Errfile = param.AsString(value)
		case "respawn":
			a.Respawn = param.AsUint(value)
		case "delay":
			a.Delay = param.AsString(value)
		case "ping":
			a.Ping = param.AsString(value)
		case "pid":
			a.Pid = param.AsInt(value)
		case "status":
			a.Status = param.AsString(value)
		case "debug":
			a.Debug = param.AsString(value)
		case "disabled":
			a.Disabled = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		case "error":
			a.Error = param.AsString(value)
		case "lastrun":
			a.Lastrun = param.AsUint(value)
		case "description":
			a.Description = param.AsString(value)
		case "enable_notify":
			a.EnableNotify = param.AsUint(value)
		case "notify_email":
			a.NotifyEmail = param.AsString(value)
		}
	}
}

func (a *NgingForeverProcess) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint(vv)
		case "Uid":
			a.Uid = param.AsUint(vv)
		case "Name":
			a.Name = param.AsString(vv)
		case "Command":
			a.Command = param.AsString(vv)
		case "Workdir":
			a.Workdir = param.AsString(vv)
		case "Env":
			a.Env = param.AsString(vv)
		case "Args":
			a.Args = param.AsString(vv)
		case "Pidfile":
			a.Pidfile = param.AsString(vv)
		case "Logfile":
			a.Logfile = param.AsString(vv)
		case "Errfile":
			a.Errfile = param.AsString(vv)
		case "Respawn":
			a.Respawn = param.AsUint(vv)
		case "Delay":
			a.Delay = param.AsString(vv)
		case "Ping":
			a.Ping = param.AsString(vv)
		case "Pid":
			a.Pid = param.AsInt(vv)
		case "Status":
			a.Status = param.AsString(vv)
		case "Debug":
			a.Debug = param.AsString(vv)
		case "Disabled":
			a.Disabled = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		case "Error":
			a.Error = param.AsString(vv)
		case "Lastrun":
			a.Lastrun = param.AsUint(vv)
		case "Description":
			a.Description = param.AsString(vv)
		case "EnableNotify":
			a.EnableNotify = param.AsUint(vv)
		case "NotifyEmail":
			a.NotifyEmail = param.AsString(vv)
		}
	}
}

func (a *NgingForeverProcess) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["id"] = a.Id
		r["uid"] = a.Uid
		r["name"] = a.Name
		r["command"] = a.Command
		r["workdir"] = a.Workdir
		r["env"] = a.Env
		r["args"] = a.Args
		r["pidfile"] = a.Pidfile
		r["logfile"] = a.Logfile
		r["errfile"] = a.Errfile
		r["respawn"] = a.Respawn
		r["delay"] = a.Delay
		r["ping"] = a.Ping
		r["pid"] = a.Pid
		r["status"] = a.Status
		r["debug"] = a.Debug
		r["disabled"] = a.Disabled
		r["created"] = a.Created
		r["updated"] = a.Updated
		r["error"] = a.Error
		r["lastrun"] = a.Lastrun
		r["description"] = a.Description
		r["enable_notify"] = a.EnableNotify
		r["notify_email"] = a.NotifyEmail
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "id":
			r["id"] = a.Id
		case "uid":
			r["uid"] = a.Uid
		case "name":
			r["name"] = a.Name
		case "command":
			r["command"] = a.Command
		case "workdir":
			r["workdir"] = a.Workdir
		case "env":
			r["env"] = a.Env
		case "args":
			r["args"] = a.Args
		case "pidfile":
			r["pidfile"] = a.Pidfile
		case "logfile":
			r["logfile"] = a.Logfile
		case "errfile":
			r["errfile"] = a.Errfile
		case "respawn":
			r["respawn"] = a.Respawn
		case "delay":
			r["delay"] = a.Delay
		case "ping":
			r["ping"] = a.Ping
		case "pid":
			r["pid"] = a.Pid
		case "status":
			r["status"] = a.Status
		case "debug":
			r["debug"] = a.Debug
		case "disabled":
			r["disabled"] = a.Disabled
		case "created":
			r["created"] = a.Created
		case "updated":
			r["updated"] = a.Updated
		case "error":
			r["error"] = a.Error
		case "lastrun":
			r["lastrun"] = a.Lastrun
		case "description":
			r["description"] = a.Description
		case "enable_notify":
			r["enable_notify"] = a.EnableNotify
		case "notify_email":
			r["notify_email"] = a.NotifyEmail
		}
	}
	return r
}

func (a *NgingForeverProcess) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *NgingForeverProcess) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *NgingForeverProcess) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *NgingForeverProcess) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
